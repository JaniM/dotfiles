#+TITLE: Config
#+STARTUP: overview

* Identity
Some functionality uses this to identify you, e.g. GPG configuration, email
clients, file templates and snippets.

#+BEGIN_SRC elisp
(setq user-full-name "Jani Mustonen"
      user-mail-address "janijohannes@kapsi.fi")

(setq auth-sources '("~/.authinfo"))
#+END_SRC

* Styles
** Doom hints
Doom exposes five (optional) variables for controlling fonts in Doom. Here
are the three important ones:

+ `doom-font'
+ `doom-variable-pitch-font'
+ `doom-big-font' -- used for `doom-big-font-mode'; use this for
  presentations or streaming.

They all accept either a font-spec, font string ("Input Mono-12"), or xlfd
font string. You generally only need these two:

#+BEGIN_SRC elisp :tangle no
;; Ignored code block for documentation
(setq doom-font (font-spec :family "monospace" :size 12 :weight 'semi-light)
      doom-variable-pitch-font (font-spec :family "sans" :size 13))
#+END_SRC

There are two ways to load a theme. Both assume the theme is installed and
available. You can either set `doom-theme' or manually load a theme with the
`load-theme' function. This is the default:
** Config
#+BEGIN_SRC elisp :tangle packages.el
(package! rainbow-delimiters)
(package! color-identifiers-mode)
#+END_SRC

Best themes: `doom-vibrant`, `doom-moonlight`, `doom-gruvbox`, `doom-acario-dark`, `doom-horizon`
#+BEGIN_SRC elisp
(setq doom-theme 'doom-gruvbox)
(set-face-attribute 'default nil :height 150)

(use-package! rainbow-delimiters
  :hook (prog-mode . rainbow-delimiters-mode))
(use-package! color-identifiers-mode
  :config
  (add-hook 'after-init-hook #'global-color-identifiers-mode)
  (setq color-identifiers:min-color-saturation 0.3)
  (setq color-identifiers:color-luminance 0.7))
#+END_SRC

This determines the style of line numbers in effect. If set to `nil', line
numbers are disabled. For relative line numbers, set this to `relative'.

#+BEGIN_SRC elisp
(setq display-line-numbers-type t)
#+END_SRC

* Org mode configuration

#+BEGIN_SRC elisp
(setq org-directory "~/org")

;; Restore default TAB behavior
(after! evil-org
  (remove-hook 'org-tab-first-hook #'+org-cycle-only-current-subtree-h))
#+END_SRC

The capturing target is the default for new templates, but it's not actually respected by the existing ones. Use `SPC X` to capture.

#+BEGIN_SRC elisp
(setq org-default-notes-file (concat org-directory "/index.org"))
#+END_SRC

* Git
Note: magit uses `auth-sources` to authorize with Github & Gitlab.

#+BEGIN_SRC elisp
(setq magit-revision-show-gravatars '("^Author:     " . "^Commit:     "))
#+END_SRC

* Rust
Uses[[https://github.com/brotzeit/rustic][ Rustic]].

Rustic's default clippy config doesn't work on stable rust yet. See [[https://github.com/brotzeit/rustic#flycheck]]

#+BEGIN_SRC elisp
;; patch rustic for stable rust
(after! rustic
  (setq rustic-flycheck-clippy-params "--message-format=json"))
#+END_SRC

* Doom hints
Here are some additional functions/macros that could help you configure Doom:

- `load!' for loading external *.el files relative to this one
- `use-package!' for configuring packages
- `after!' for running code after a package has loaded
- `add-load-path!' for adding directories to the `load-path', relative to
  this file. Emacs searches the `load-path' when you load packages with
  `require' or `use-package'.
- `map!' for binding new keys

To get information about any of these functions/macros, move the cursor over
the highlighted symbol at press 'K' (non-evil users must press 'C-c c k').
This will open documentation for it, including demos of how they are used.

You can also try 'gd' (or 'C-c c d') to jump to their definition and see how
they are implemented.
